from django.contrib.auth.models import AbstractUser
from django.db import models

# Custom User model extending AbstractUser
class User(AbstractUser):
    # Additional fields can be added here if necessary
    is_student = models.BooleanField(default=False)
    is_instructor = models.BooleanField(default=False)

    def __str__(self):
        return self.username

# Course model
class Course(models.Model):
    title = models.CharField(max_length=255)
    description = models.TextField()
    instructor = models.ForeignKey(User, related_name='courses', on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.title

# Lesson model
class Lesson(models.Model):
    title = models.CharField(max_length=255)
    course = models.ForeignKey(Course, related_name='lessons', on_delete=models.CASCADE)
    video_url = models.URLField()
    order = models.IntegerField(default=0)  # Order of lessons in the course
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title

# Enrollment model
class Enrollment(models.Model):
    user = models.ForeignKey(User, related_name='enrollments', on_delete=models.CASCADE)
    course = models.ForeignKey(Course, related_name='enrollments', on_delete=models.CASCADE)
    progress = models.FloatField(default=0.0)  # Progress from 0.0 to 100.0
    enrolled_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ('user', 'course')  # Ensure one user can enroll in a course only once

    def __str_
